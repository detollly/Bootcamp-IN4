# Book class represents individual books with attributes such as title, author, and availability status.
class Book:
    def __init__(self, title, author, is_available=True):
        self.title = title
        self.author = author
        self.is_available = is_available

    def __str__(self):
        return f'Book: {self.title} by {self.author} - {"Available" if self.is_available else "Not Available"}'

# Member class models library members with attributes like name, member ID, and a list of borrowed books.
class Member:
    def __init__(self, name, member_id):
        self.name = name
        self.member_id = member_id
        self.borrowed_books = []

    def __str__(self):
        borrowed = ', '.join(book.title for book in self.borrowed_books)
        return f'Member: {self.name} (ID: {self.member_id}), Borrowed Books: {borrowed if borrowed else "None"}'

# Library class manages the library's collection of books and members.
class Library:
    def __init__(self):
        self.books = []
        self.members = []

    def add_book(self, book):
        self.books.append(book)

    def register_member(self, member):
        self.members.append(member)

    def lend_book(self, title, member_id):
        for book in self.books:
            if book.title == title and book.is_available:
                for member in self.members:
                    if member.member_id == member_id:
                        member.borrowed_books.append(book)
                        book.is_available = False
                        return f'Book "{title}" has been lent to {member.name}.'
        return f'Book "{title}" is not available or does not exist.'

    def return_book(self, title, member_id):
        for member in self.members:
            if member.member_id == member_id:
                for book in member.borrowed_books:
                    if book.title == title:
                        member.borrowed_books.remove(book)
                        book.is_available = True
                        self.books.append(book if book not in self.books else None)
                        return f'Book "{title}" has been returned by {member.name}.'
        return f'Book "{title}" was not borrowed by member with ID {member_id}.'

# Test the Library System:

# Creating instances of the Book class
book1 = Book("1984", "George Orwell")
book2 = Book("To Kill a Mockingbird", "Harper Lee")
book3 = Book("The Great Gatsby", "F. Scott Fitzgerald")

# Creating instances of the Member class
member1 = Member("Alice", 1)
member2 = Member("Bob", 2)

# Creating an instance of the Library class
library = Library()

# Adding books to the library
library.add_book(book1)
library.add_book(book2)
library.add_book(book3)

# Registering members to the library
library.register_member(member1)
library.register_member(member2)

# Testing the functionality of lending books
print(library.lend_book("1984", 1))  # Output: Book "1984" has been lent to Alice.
print(library.lend_book("The Great Gatsby", 2))  # Output: Book "The Great Gatsby" has been lent to Bob.

# Testing the functionality of returning books
print(library.return_book("1984", 1))  # Output: Book "1984" has been returned by Alice.
print(library.return_book("The Great Gatsby", 2))  # Output: Book "The Great Gatsby" has been returned by Bob.

# Print the current status of books and members
print(book1)  # Output: Book: 1984 by George Orwell - Available
print(book2)  # Output: Book: To Kill a Mockingbird by Harper Lee - Available
print(book3)  # Output: Book: The Great Gatsby by F. Scott Fitzgerald - Available
print(member1)  # Output: Member: Alice (ID: 1), Borrowed Books: None
print(member2)  # Output: Member: Bob (ID: 2), Borrowed Books: None
